// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "api/router.proto" (package "router", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Router } from "./router";
import type { Participant } from "../models/participant";
import type { ParticipantsResponse } from "./router";
import type { NumberResponse } from "./router";
import type { RoleResponse } from "./router";
import type { SearchRequest } from "./router";
import type { StudorgsResponse } from "./router";
import type { Studorg } from "../models/studorg";
import type { StudorgIDResponse } from "./router";
import type { StudorgInfo } from "../models/studorg";
import type { StudorgResponse } from "./router";
import type { StudorgID } from "../models/studorg";
import type { RegistrationRequest } from "./router";
import type { AuthInfo } from "../models/user";
import type { UserIDResponse } from "./router";
import type { AuthorizationRequest } from "./router";
import type { SuccessResponse } from "./router";
import type { User } from "../models/user";
import type { UserInfo } from "../models/user";
import type { UserID } from "../models/user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserResponse } from "./router";
import type { WithoutParameters } from "./router";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service router.Router
 */
export interface IRouterClient {
    /**
     * user methods
     *
     * @generated from protobuf rpc: GetPersonalInfo(router.WithoutParameters) returns (router.UserResponse);
     */
    getPersonalInfo(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, UserResponse>;
    /**
     * @generated from protobuf rpc: GetUser(user.UserID) returns (router.UserResponse);
     */
    getUser(input: UserID, options?: RpcOptions): UnaryCall<UserID, UserResponse>;
    /**
     * @generated from protobuf rpc: InsertUser(user.UserInfo) returns (router.UserResponse);
     */
    insertUser(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, UserResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser(user.User) returns (router.SuccessResponse);
     */
    updateUser(input: User, options?: RpcOptions): UnaryCall<User, SuccessResponse>;
    /**
     * authorization methods
     *
     * @generated from protobuf rpc: AuthorizeUser(router.AuthorizationRequest) returns (router.UserIDResponse);
     */
    authorizeUser(input: AuthorizationRequest, options?: RpcOptions): UnaryCall<AuthorizationRequest, UserIDResponse>;
    /**
     * @generated from protobuf rpc: IsAuth(router.WithoutParameters) returns (user.AuthInfo);
     */
    isAuth(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, AuthInfo>;
    /**
     * @generated from protobuf rpc: Logout(router.WithoutParameters) returns (router.SuccessResponse);
     */
    logout(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, SuccessResponse>;
    /**
     * @generated from protobuf rpc: RegisterUser(router.RegistrationRequest) returns (router.UserIDResponse);
     */
    registerUser(input: RegistrationRequest, options?: RpcOptions): UnaryCall<RegistrationRequest, UserIDResponse>;
    /**
     * studorgs methods
     *
     * @generated from protobuf rpc: GetStudorg(studorg.StudorgID) returns (router.StudorgResponse);
     */
    getStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, StudorgResponse>;
    /**
     * @generated from protobuf rpc: CreateStudorg(studorg.StudorgInfo) returns (router.StudorgIDResponse);
     */
    createStudorg(input: StudorgInfo, options?: RpcOptions): UnaryCall<StudorgInfo, StudorgIDResponse>;
    /**
     * @generated from protobuf rpc: UpdateStudorg(studorg.Studorg) returns (router.SuccessResponse);
     */
    updateStudorg(input: Studorg, options?: RpcOptions): UnaryCall<Studorg, SuccessResponse>;
    /**
     * @generated from protobuf rpc: GetAllStudorgs(router.WithoutParameters) returns (router.StudorgsResponse);
     */
    getAllStudorgs(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, StudorgsResponse>;
    /**
     * @generated from protobuf rpc: SearchStudorgs(router.SearchRequest) returns (router.StudorgsResponse);
     */
    searchStudorgs(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, StudorgsResponse>;
    /**
     * user2studorg methods
     *
     * @generated from protobuf rpc: GetPersonalStudorgRole(studorg.StudorgID) returns (router.RoleResponse);
     */
    getPersonalStudorgRole(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, RoleResponse>;
    /**
     * @generated from protobuf rpc: GetPersonalStudorgs(router.WithoutParameters) returns (router.StudorgsResponse);
     */
    getPersonalStudorgs(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, StudorgsResponse>;
    /**
     * @generated from protobuf rpc: GetPersonalStudorgsNumber(user.UserID) returns (router.NumberResponse);
     */
    getPersonalStudorgsNumber(input: UserID, options?: RpcOptions): UnaryCall<UserID, NumberResponse>;
    /**
     * @generated from protobuf rpc: GetParticipants(studorg.StudorgID) returns (router.ParticipantsResponse);
     */
    getParticipants(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, ParticipantsResponse>;
    /**
     * @generated from protobuf rpc: GetOrganizers(studorg.StudorgID) returns (router.ParticipantsResponse);
     */
    getOrganizers(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, ParticipantsResponse>;
    /**
     * @generated from protobuf rpc: GetParticipantsNumber(studorg.StudorgID) returns (router.NumberResponse);
     */
    getParticipantsNumber(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, NumberResponse>;
    /**
     * @generated from protobuf rpc: AddToStudorg(studorg.StudorgID) returns (router.SuccessResponse);
     */
    addToStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, SuccessResponse>;
    /**
     * @generated from protobuf rpc: DeleteFromStudorg(studorg.StudorgID) returns (router.SuccessResponse);
     */
    deleteFromStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, SuccessResponse>;
    /**
     * @generated from protobuf rpc: UpdateParticipant(participant.Participant) returns (router.SuccessResponse);
     */
    updateParticipant(input: Participant, options?: RpcOptions): UnaryCall<Participant, SuccessResponse>;
    // moderation methods

    /**
     * @generated from protobuf rpc: ModerateStudorg(studorg.Studorg) returns (router.SuccessResponse);
     */
    moderateStudorg(input: Studorg, options?: RpcOptions): UnaryCall<Studorg, SuccessResponse>;
}
/**
 * @generated from protobuf service router.Router
 */
export class RouterClient implements IRouterClient, ServiceInfo {
    typeName = Router.typeName;
    methods = Router.methods;
    options = Router.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * user methods
     *
     * @generated from protobuf rpc: GetPersonalInfo(router.WithoutParameters) returns (router.UserResponse);
     */
    getPersonalInfo(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, UserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithoutParameters, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser(user.UserID) returns (router.UserResponse);
     */
    getUser(input: UserID, options?: RpcOptions): UnaryCall<UserID, UserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserID, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InsertUser(user.UserInfo) returns (router.UserResponse);
     */
    insertUser(input: UserInfo, options?: RpcOptions): UnaryCall<UserInfo, UserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserInfo, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(user.User) returns (router.SuccessResponse);
     */
    updateUser(input: User, options?: RpcOptions): UnaryCall<User, SuccessResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * authorization methods
     *
     * @generated from protobuf rpc: AuthorizeUser(router.AuthorizationRequest) returns (router.UserIDResponse);
     */
    authorizeUser(input: AuthorizationRequest, options?: RpcOptions): UnaryCall<AuthorizationRequest, UserIDResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizationRequest, UserIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IsAuth(router.WithoutParameters) returns (user.AuthInfo);
     */
    isAuth(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, AuthInfo> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithoutParameters, AuthInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(router.WithoutParameters) returns (router.SuccessResponse);
     */
    logout(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, SuccessResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithoutParameters, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterUser(router.RegistrationRequest) returns (router.UserIDResponse);
     */
    registerUser(input: RegistrationRequest, options?: RpcOptions): UnaryCall<RegistrationRequest, UserIDResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegistrationRequest, UserIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * studorgs methods
     *
     * @generated from protobuf rpc: GetStudorg(studorg.StudorgID) returns (router.StudorgResponse);
     */
    getStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, StudorgResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, StudorgResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateStudorg(studorg.StudorgInfo) returns (router.StudorgIDResponse);
     */
    createStudorg(input: StudorgInfo, options?: RpcOptions): UnaryCall<StudorgInfo, StudorgIDResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgInfo, StudorgIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateStudorg(studorg.Studorg) returns (router.SuccessResponse);
     */
    updateStudorg(input: Studorg, options?: RpcOptions): UnaryCall<Studorg, SuccessResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<Studorg, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllStudorgs(router.WithoutParameters) returns (router.StudorgsResponse);
     */
    getAllStudorgs(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, StudorgsResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithoutParameters, StudorgsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SearchStudorgs(router.SearchRequest) returns (router.StudorgsResponse);
     */
    searchStudorgs(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, StudorgsResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, StudorgsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * user2studorg methods
     *
     * @generated from protobuf rpc: GetPersonalStudorgRole(studorg.StudorgID) returns (router.RoleResponse);
     */
    getPersonalStudorgRole(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, RoleResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, RoleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPersonalStudorgs(router.WithoutParameters) returns (router.StudorgsResponse);
     */
    getPersonalStudorgs(input: WithoutParameters, options?: RpcOptions): UnaryCall<WithoutParameters, StudorgsResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithoutParameters, StudorgsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPersonalStudorgsNumber(user.UserID) returns (router.NumberResponse);
     */
    getPersonalStudorgsNumber(input: UserID, options?: RpcOptions): UnaryCall<UserID, NumberResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserID, NumberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParticipants(studorg.StudorgID) returns (router.ParticipantsResponse);
     */
    getParticipants(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, ParticipantsResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, ParticipantsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOrganizers(studorg.StudorgID) returns (router.ParticipantsResponse);
     */
    getOrganizers(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, ParticipantsResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, ParticipantsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetParticipantsNumber(studorg.StudorgID) returns (router.NumberResponse);
     */
    getParticipantsNumber(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, NumberResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, NumberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddToStudorg(studorg.StudorgID) returns (router.SuccessResponse);
     */
    addToStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, SuccessResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteFromStudorg(studorg.StudorgID) returns (router.SuccessResponse);
     */
    deleteFromStudorg(input: StudorgID, options?: RpcOptions): UnaryCall<StudorgID, SuccessResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<StudorgID, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateParticipant(participant.Participant) returns (router.SuccessResponse);
     */
    updateParticipant(input: Participant, options?: RpcOptions): UnaryCall<Participant, SuccessResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<Participant, SuccessResponse>("unary", this._transport, method, opt, input);
    }
    // moderation methods

    /**
     * @generated from protobuf rpc: ModerateStudorg(studorg.Studorg) returns (router.SuccessResponse);
     */
    moderateStudorg(input: Studorg, options?: RpcOptions): UnaryCall<Studorg, SuccessResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<Studorg, SuccessResponse>("unary", this._transport, method, opt, input);
    }
}
