// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "api/router.proto" (package "router", syntax proto3)
// tslint:disable
import { StudorgInfo } from "../models/studorg";
import { StudorgID } from "../models/studorg";
import { UserStudorgs } from "../models/studorg";
import { UserInfo } from "../models/user";
import { UserIDs } from "../models/user";
import { UserID } from "../models/user";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Studorgs } from "../models/studorg";
import { Studorg } from "../models/studorg";
import { Users } from "../models/user";
import { User } from "../models/user";
/**
 * @generated from protobuf message router.WithoutParameters
 */
export interface WithoutParameters {
}
/**
 * @generated from protobuf message router.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: user.User user = 2;
         */
        user: User;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.UsersResponse
 */
export interface UsersResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "users";
        /**
         * @generated from protobuf field: user.Users users = 2;
         */
        users: Users;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.StudorgResponse
 */
export interface StudorgResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "studorg";
        /**
         * @generated from protobuf field: studorg.Studorg studorg = 2;
         */
        studorg: Studorg;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.StudorgsResponse
 */
export interface StudorgsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "studorgs";
        /**
         * @generated from protobuf field: studorg.Studorgs studorgs = 2;
         */
        studorgs: Studorgs;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string msg = 1;
     */
    msg: string;
}
/**
 * @generated from protobuf message router.UsersNumberResponse
 */
export interface UsersNumberResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "number";
        /**
         * @generated from protobuf field: int64 number = 2;
         */
        number: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.AuthorizationRequest
 */
export interface AuthorizationRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message router.ValidationResponse
 */
export interface ValidationResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "valid";
        /**
         * @generated from protobuf field: bool valid = 2;
         */
        valid: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * @generated from protobuf field: string Email = 1 [json_name = "Email"];
     */
    email: string;
    /**
     * @generated from protobuf field: string Password = 2 [json_name = "Password"];
     */
    password: string;
    /**
     * @generated from protobuf field: string Name = 3 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: string Surname = 4 [json_name = "Surname"];
     */
    surname: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class WithoutParameters$Type extends MessageType<WithoutParameters> {
    constructor() {
        super("router.WithoutParameters", []);
    }
    create(value?: PartialMessage<WithoutParameters>): WithoutParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WithoutParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithoutParameters): WithoutParameters {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WithoutParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.WithoutParameters
 */
export const WithoutParameters = new WithoutParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("router.UserResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "user", kind: "message", oneof: "response", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* user.User user */ 2:
                    message.response = {
                        oneofKind: "user",
                        user: User.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* user.User user = 2; */
        if (message.response.oneofKind === "user")
            User.internalBinaryWrite(message.response.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsersResponse$Type extends MessageType<UsersResponse> {
    constructor() {
        super("router.UsersResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "users", kind: "message", oneof: "response", T: () => Users }
        ]);
    }
    create(value?: PartialMessage<UsersResponse>): UsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsersResponse): UsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* user.Users users */ 2:
                    message.response = {
                        oneofKind: "users",
                        users: Users.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).users)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* user.Users users = 2; */
        if (message.response.oneofKind === "users")
            Users.internalBinaryWrite(message.response.users, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.UsersResponse
 */
export const UsersResponse = new UsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgResponse$Type extends MessageType<StudorgResponse> {
    constructor() {
        super("router.StudorgResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "studorg", kind: "message", oneof: "response", T: () => Studorg }
        ]);
    }
    create(value?: PartialMessage<StudorgResponse>): StudorgResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StudorgResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgResponse): StudorgResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* studorg.Studorg studorg */ 2:
                    message.response = {
                        oneofKind: "studorg",
                        studorg: Studorg.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).studorg)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.Studorg studorg = 2; */
        if (message.response.oneofKind === "studorg")
            Studorg.internalBinaryWrite(message.response.studorg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.StudorgResponse
 */
export const StudorgResponse = new StudorgResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgsResponse$Type extends MessageType<StudorgsResponse> {
    constructor() {
        super("router.StudorgsResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "studorgs", kind: "message", oneof: "response", T: () => Studorgs }
        ]);
    }
    create(value?: PartialMessage<StudorgsResponse>): StudorgsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StudorgsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgsResponse): StudorgsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* studorg.Studorgs studorgs */ 2:
                    message.response = {
                        oneofKind: "studorgs",
                        studorgs: Studorgs.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).studorgs)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.Studorgs studorgs = 2; */
        if (message.response.oneofKind === "studorgs")
            Studorgs.internalBinaryWrite(message.response.studorgs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.StudorgsResponse
 */
export const StudorgsResponse = new StudorgsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("router.Error", [
            { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msg = "";
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msg */ 1:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msg = 1; */
        if (message.msg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsersNumberResponse$Type extends MessageType<UsersNumberResponse> {
    constructor() {
        super("router.UsersNumberResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "number", kind: "scalar", oneof: "response", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<UsersNumberResponse>): UsersNumberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UsersNumberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsersNumberResponse): UsersNumberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* int64 number */ 2:
                    message.response = {
                        oneofKind: "number",
                        number: reader.int64().toString()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsersNumberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 number = 2; */
        if (message.response.oneofKind === "number")
            writer.tag(2, WireType.Varint).int64(message.response.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.UsersNumberResponse
 */
export const UsersNumberResponse = new UsersNumberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationRequest$Type extends MessageType<AuthorizationRequest> {
    constructor() {
        super("router.AuthorizationRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationRequest>): AuthorizationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<AuthorizationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationRequest): AuthorizationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.AuthorizationRequest
 */
export const AuthorizationRequest = new AuthorizationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidationResponse$Type extends MessageType<ValidationResponse> {
    constructor() {
        super("router.ValidationResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "valid", kind: "scalar", oneof: "response", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ValidationResponse>): ValidationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ValidationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidationResponse): ValidationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* bool valid */ 2:
                    message.response = {
                        oneofKind: "valid",
                        valid: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool valid = 2; */
        if (message.response.oneofKind === "valid")
            writer.tag(2, WireType.Varint).bool(message.response.valid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.ValidationResponse
 */
export const ValidationResponse = new ValidationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegistrationRequest$Type extends MessageType<RegistrationRequest> {
    constructor() {
        super("router.RegistrationRequest", [
            { no: 1, name: "Email", kind: "scalar", jsonName: "Email", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Password", kind: "scalar", jsonName: "Password", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Surname", kind: "scalar", jsonName: "Surname", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegistrationRequest>): RegistrationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.name = "";
        message.surname = "";
        if (value !== undefined)
            reflectionMergePartial<RegistrationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegistrationRequest): RegistrationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Email = 1 [json_name = "Email"];*/ 1:
                    message.email = reader.string();
                    break;
                case /* string Password = 2 [json_name = "Password"];*/ 2:
                    message.password = reader.string();
                    break;
                case /* string Name = 3 [json_name = "Name"];*/ 3:
                    message.name = reader.string();
                    break;
                case /* string Surname = 4 [json_name = "Surname"];*/ 4:
                    message.surname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegistrationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Email = 1 [json_name = "Email"]; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string Password = 2 [json_name = "Password"]; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string Name = 3 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string Surname = 4 [json_name = "Surname"]; */
        if (message.surname !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.surname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.RegistrationRequest
 */
export const RegistrationRequest = new RegistrationRequest$Type();
/**
 * @generated ServiceType for protobuf service router.Router
 */
export const Router = new ServiceType("router.Router", [
    { name: "GetUser", options: {}, I: UserID, O: UserResponse },
    { name: "GetUsers", options: {}, I: UserIDs, O: UsersResponse },
    { name: "InsertUser", options: {}, I: UserInfo, O: UserResponse },
    { name: "UpdateUser", options: {}, I: User, O: UserResponse },
    { name: "AuthorizeUser", options: {}, I: AuthorizationRequest, O: UserResponse },
    { name: "RegisterUser", options: {}, I: RegistrationRequest, O: UserResponse },
    { name: "ValidateAuthorization", options: {}, I: WithoutParameters, O: ValidationResponse },
    { name: "GetUserStudorgs", options: {}, I: UserID, O: UserStudorgs },
    { name: "GetAllStudorgs", options: {}, I: WithoutParameters, O: StudorgsResponse },
    { name: "GetStudorg", options: {}, I: StudorgID, O: StudorgResponse },
    { name: "InsertStudorg", options: {}, I: StudorgInfo, O: StudorgResponse },
    { name: "UpdateStudorg", options: {}, I: Studorg, O: StudorgResponse },
    { name: "GetStudorgUsersNumber", options: {}, I: StudorgID, O: UsersNumberResponse }
]);
