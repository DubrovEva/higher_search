// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "api/router.proto" (package "router", syntax proto3)
// tslint:disable
import { StudorgInfo } from "../models/studorg";
import { AuthInfo } from "../models/user";
import { UserInfo } from "../models/user";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StudorgRole } from "../models/studorg";
import { ErrorCode } from "../models/errors";
import { Studorgs } from "../models/studorg";
import { StudorgID } from "../models/studorg";
import { Studorg } from "../models/studorg";
import { Participants } from "../models/participant";
import { Participant } from "../models/participant";
import { UserID } from "../models/user";
import { User } from "../models/user";
import { Language } from "../models/common";
import { Campus } from "../models/common";
import { Faculty } from "../models/common";
// requests

/**
 * @generated from protobuf message router.WithoutParameters
 */
export interface WithoutParameters {
}
/**
 * @generated from protobuf message router.AuthorizationRequest
 */
export interface AuthorizationRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message router.RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 4;
     */
    surname: string;
}
/**
 * @generated from protobuf message router.SearchRequest
 */
export interface SearchRequest {
    /**
     * @generated from protobuf field: common.Faculty faculty = 1;
     */
    faculty: Faculty;
    /**
     * @generated from protobuf field: common.Campus campus = 2;
     */
    campus: Campus;
    /**
     * @generated from protobuf field: common.Language language = 3;
     */
    language: Language;
    /**
     * @generated from protobuf field: repeated string tags = 4;
     */
    tags: string[];
}
// responses

/**
 * @generated from protobuf message router.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: user.User user = 2;
         */
        user: User;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.UserIDResponse
 */
export interface UserIDResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "userID";
        /**
         * @generated from protobuf field: user.UserID userID = 2;
         */
        userID: UserID;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.ParticipantResponse
 */
export interface ParticipantResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "participant";
        /**
         * @generated from protobuf field: participant.Participant participant = 2;
         */
        participant: Participant;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.ParticipantsResponse
 */
export interface ParticipantsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "participants";
        /**
         * @generated from protobuf field: participant.Participants participants = 2;
         */
        participants: Participants;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.StudorgResponse
 */
export interface StudorgResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "studorg";
        /**
         * @generated from protobuf field: studorg.Studorg studorg = 2;
         */
        studorg: Studorg;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.StudorgIDResponse
 */
export interface StudorgIDResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "studorgID";
        /**
         * @generated from protobuf field: studorg.StudorgID studorgID = 2;
         */
        studorgID: StudorgID;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.StudorgsResponse
 */
export interface StudorgsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "studorgs";
        /**
         * @generated from protobuf field: studorg.Studorgs studorgs = 2;
         */
        studorgs: Studorgs;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string msg = 1;
     */
    msg: string;
    /**
     * @generated from protobuf field: errors.ErrorCode code = 2;
     */
    code: ErrorCode;
}
/**
 * @generated from protobuf message router.NumberResponse
 */
export interface NumberResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "number";
        /**
         * @generated from protobuf field: int64 number = 2;
         */
        number: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.SuccessResponse
 */
export interface SuccessResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "err";
        /**
         * @generated from protobuf field: router.Error err = 1;
         */
        err: Error;
    } | {
        oneofKind: "success";
        /**
         * @generated from protobuf field: bool success = 2;
         */
        success: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message router.RoleResponse
 */
export interface RoleResponse {
    /**
     * @generated from protobuf field: studorg.StudorgRole role = 1;
     */
    role: StudorgRole;
}
// @generated message type with reflection information, may provide speed optimized methods
class WithoutParameters$Type extends MessageType<WithoutParameters> {
    constructor() {
        super("router.WithoutParameters", []);
    }
    create(value?: PartialMessage<WithoutParameters>): WithoutParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WithoutParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithoutParameters): WithoutParameters {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WithoutParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.WithoutParameters
 */
export const WithoutParameters = new WithoutParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationRequest$Type extends MessageType<AuthorizationRequest> {
    constructor() {
        super("router.AuthorizationRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationRequest>): AuthorizationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<AuthorizationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationRequest): AuthorizationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.AuthorizationRequest
 */
export const AuthorizationRequest = new AuthorizationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegistrationRequest$Type extends MessageType<RegistrationRequest> {
    constructor() {
        super("router.RegistrationRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegistrationRequest>): RegistrationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.name = "";
        message.surname = "";
        if (value !== undefined)
            reflectionMergePartial<RegistrationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegistrationRequest): RegistrationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string surname */ 4:
                    message.surname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegistrationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string surname = 4; */
        if (message.surname !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.surname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.RegistrationRequest
 */
export const RegistrationRequest = new RegistrationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("router.SearchRequest", [
            { no: 1, name: "faculty", kind: "enum", T: () => ["common.Faculty", Faculty] },
            { no: 2, name: "campus", kind: "enum", T: () => ["common.Campus", Campus] },
            { no: 3, name: "language", kind: "enum", T: () => ["common.Language", Language] },
            { no: 4, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.faculty = 0;
        message.campus = 0;
        message.language = 0;
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Faculty faculty */ 1:
                    message.faculty = reader.int32();
                    break;
                case /* common.Campus campus */ 2:
                    message.campus = reader.int32();
                    break;
                case /* common.Language language */ 3:
                    message.language = reader.int32();
                    break;
                case /* repeated string tags */ 4:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Faculty faculty = 1; */
        if (message.faculty !== 0)
            writer.tag(1, WireType.Varint).int32(message.faculty);
        /* common.Campus campus = 2; */
        if (message.campus !== 0)
            writer.tag(2, WireType.Varint).int32(message.campus);
        /* common.Language language = 3; */
        if (message.language !== 0)
            writer.tag(3, WireType.Varint).int32(message.language);
        /* repeated string tags = 4; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("router.UserResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "user", kind: "message", oneof: "response", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* user.User user */ 2:
                    message.response = {
                        oneofKind: "user",
                        user: User.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* user.User user = 2; */
        if (message.response.oneofKind === "user")
            User.internalBinaryWrite(message.response.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserIDResponse$Type extends MessageType<UserIDResponse> {
    constructor() {
        super("router.UserIDResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "userID", kind: "message", oneof: "response", T: () => UserID }
        ]);
    }
    create(value?: PartialMessage<UserIDResponse>): UserIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UserIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserIDResponse): UserIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* user.UserID userID */ 2:
                    message.response = {
                        oneofKind: "userID",
                        userID: UserID.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).userID)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* user.UserID userID = 2; */
        if (message.response.oneofKind === "userID")
            UserID.internalBinaryWrite(message.response.userID, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.UserIDResponse
 */
export const UserIDResponse = new UserIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantResponse$Type extends MessageType<ParticipantResponse> {
    constructor() {
        super("router.ParticipantResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "participant", kind: "message", oneof: "response", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantResponse>): ParticipantResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ParticipantResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantResponse): ParticipantResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* participant.Participant participant */ 2:
                    message.response = {
                        oneofKind: "participant",
                        participant: Participant.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).participant)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* participant.Participant participant = 2; */
        if (message.response.oneofKind === "participant")
            Participant.internalBinaryWrite(message.response.participant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.ParticipantResponse
 */
export const ParticipantResponse = new ParticipantResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantsResponse$Type extends MessageType<ParticipantsResponse> {
    constructor() {
        super("router.ParticipantsResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "participants", kind: "message", oneof: "response", T: () => Participants }
        ]);
    }
    create(value?: PartialMessage<ParticipantsResponse>): ParticipantsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ParticipantsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantsResponse): ParticipantsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* participant.Participants participants */ 2:
                    message.response = {
                        oneofKind: "participants",
                        participants: Participants.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).participants)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* participant.Participants participants = 2; */
        if (message.response.oneofKind === "participants")
            Participants.internalBinaryWrite(message.response.participants, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.ParticipantsResponse
 */
export const ParticipantsResponse = new ParticipantsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgResponse$Type extends MessageType<StudorgResponse> {
    constructor() {
        super("router.StudorgResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "studorg", kind: "message", oneof: "response", T: () => Studorg }
        ]);
    }
    create(value?: PartialMessage<StudorgResponse>): StudorgResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StudorgResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgResponse): StudorgResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* studorg.Studorg studorg */ 2:
                    message.response = {
                        oneofKind: "studorg",
                        studorg: Studorg.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).studorg)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.Studorg studorg = 2; */
        if (message.response.oneofKind === "studorg")
            Studorg.internalBinaryWrite(message.response.studorg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.StudorgResponse
 */
export const StudorgResponse = new StudorgResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgIDResponse$Type extends MessageType<StudorgIDResponse> {
    constructor() {
        super("router.StudorgIDResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "studorgID", kind: "message", oneof: "response", T: () => StudorgID }
        ]);
    }
    create(value?: PartialMessage<StudorgIDResponse>): StudorgIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StudorgIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgIDResponse): StudorgIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* studorg.StudorgID studorgID */ 2:
                    message.response = {
                        oneofKind: "studorgID",
                        studorgID: StudorgID.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).studorgID)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.StudorgID studorgID = 2; */
        if (message.response.oneofKind === "studorgID")
            StudorgID.internalBinaryWrite(message.response.studorgID, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.StudorgIDResponse
 */
export const StudorgIDResponse = new StudorgIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgsResponse$Type extends MessageType<StudorgsResponse> {
    constructor() {
        super("router.StudorgsResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "studorgs", kind: "message", oneof: "response", T: () => Studorgs }
        ]);
    }
    create(value?: PartialMessage<StudorgsResponse>): StudorgsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StudorgsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgsResponse): StudorgsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* studorg.Studorgs studorgs */ 2:
                    message.response = {
                        oneofKind: "studorgs",
                        studorgs: Studorgs.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).studorgs)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.Studorgs studorgs = 2; */
        if (message.response.oneofKind === "studorgs")
            Studorgs.internalBinaryWrite(message.response.studorgs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.StudorgsResponse
 */
export const StudorgsResponse = new StudorgsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("router.Error", [
            { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "enum", T: () => ["errors.ErrorCode", ErrorCode] }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msg = "";
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msg */ 1:
                    message.msg = reader.string();
                    break;
                case /* errors.ErrorCode code */ 2:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msg = 1; */
        if (message.msg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msg);
        /* errors.ErrorCode code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NumberResponse$Type extends MessageType<NumberResponse> {
    constructor() {
        super("router.NumberResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "number", kind: "scalar", oneof: "response", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<NumberResponse>): NumberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<NumberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NumberResponse): NumberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* int64 number */ 2:
                    message.response = {
                        oneofKind: "number",
                        number: reader.int64().toString()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NumberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 number = 2; */
        if (message.response.oneofKind === "number")
            writer.tag(2, WireType.Varint).int64(message.response.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.NumberResponse
 */
export const NumberResponse = new NumberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuccessResponse$Type extends MessageType<SuccessResponse> {
    constructor() {
        super("router.SuccessResponse", [
            { no: 1, name: "err", kind: "message", oneof: "response", T: () => Error },
            { no: 2, name: "success", kind: "scalar", oneof: "response", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuccessResponse>): SuccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SuccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuccessResponse): SuccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* router.Error err */ 1:
                    message.response = {
                        oneofKind: "err",
                        err: Error.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).err)
                    };
                    break;
                case /* bool success */ 2:
                    message.response = {
                        oneofKind: "success",
                        success: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* router.Error err = 1; */
        if (message.response.oneofKind === "err")
            Error.internalBinaryWrite(message.response.err, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool success = 2; */
        if (message.response.oneofKind === "success")
            writer.tag(2, WireType.Varint).bool(message.response.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.SuccessResponse
 */
export const SuccessResponse = new SuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleResponse$Type extends MessageType<RoleResponse> {
    constructor() {
        super("router.RoleResponse", [
            { no: 1, name: "role", kind: "enum", T: () => ["studorg.StudorgRole", StudorgRole] }
        ]);
    }
    create(value?: PartialMessage<RoleResponse>): RoleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<RoleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleResponse): RoleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* studorg.StudorgRole role */ 1:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* studorg.StudorgRole role = 1; */
        if (message.role !== 0)
            writer.tag(1, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message router.RoleResponse
 */
export const RoleResponse = new RoleResponse$Type();
/**
 * @generated ServiceType for protobuf service router.Router
 */
export const Router = new ServiceType("router.Router", [
    { name: "GetPersonalInfo", options: {}, I: WithoutParameters, O: UserResponse },
    { name: "GetUser", options: {}, I: UserID, O: UserResponse },
    { name: "InsertUser", options: {}, I: UserInfo, O: UserResponse },
    { name: "UpdateUser", options: {}, I: User, O: SuccessResponse },
    { name: "AuthorizeUser", options: {}, I: AuthorizationRequest, O: UserIDResponse },
    { name: "IsAuth", options: {}, I: WithoutParameters, O: AuthInfo },
    { name: "Logout", options: {}, I: WithoutParameters, O: SuccessResponse },
    { name: "RegisterUser", options: {}, I: RegistrationRequest, O: UserIDResponse },
    { name: "GetStudorg", options: {}, I: StudorgID, O: StudorgResponse },
    { name: "CreateStudorg", options: {}, I: StudorgInfo, O: StudorgIDResponse },
    { name: "UpdateStudorg", options: {}, I: Studorg, O: SuccessResponse },
    { name: "GetAllStudorgs", options: {}, I: WithoutParameters, O: StudorgsResponse },
    { name: "SearchStudorgs", options: {}, I: SearchRequest, O: StudorgsResponse },
    { name: "GetPersonalStudorgRole", options: {}, I: StudorgID, O: RoleResponse },
    { name: "GetPersonalStudorgs", options: {}, I: WithoutParameters, O: StudorgsResponse },
    { name: "GetPersonalStudorgsNumber", options: {}, I: UserID, O: NumberResponse },
    { name: "GetParticipants", options: {}, I: StudorgID, O: ParticipantsResponse },
    { name: "GetOrganizers", options: {}, I: StudorgID, O: ParticipantsResponse },
    { name: "GetParticipantsNumber", options: {}, I: StudorgID, O: NumberResponse },
    { name: "AddToStudorg", options: {}, I: StudorgID, O: SuccessResponse },
    { name: "DeleteFromStudorg", options: {}, I: StudorgID, O: SuccessResponse },
    { name: "UpdateParticipant", options: {}, I: Participant, O: SuccessResponse },
    { name: "ModerateStudorg", options: {}, I: Studorg, O: SuccessResponse }
]);
