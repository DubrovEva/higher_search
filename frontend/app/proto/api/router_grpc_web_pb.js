/**
 * @fileoverview gRPC-Web generated client stub for router
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: api/router.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var models_user_pb = require('../models/user_pb.js')

var models_studorg_pb = require('../models/studorg_pb.js')
const proto = {};
proto.router = require('./router_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.router.RouterClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.router.RouterPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserID,
 *   !proto.router.UserResponse>}
 */
const methodDescriptor_Router_GetUser = new grpc.web.MethodDescriptor(
  '/router.Router/GetUser',
  grpc.web.MethodType.UNARY,
  models_user_pb.UserID,
  proto.router.UserResponse,
  /**
   * @param {!proto.user.UserID} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.UserResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserID} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.getUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/GetUser',
      request,
      metadata || {},
      methodDescriptor_Router_GetUser,
      callback);
};


/**
 * @param {!proto.user.UserID} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.UserResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.getUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/GetUser',
      request,
      metadata || {},
      methodDescriptor_Router_GetUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserInfo,
 *   !proto.router.UserResponse>}
 */
const methodDescriptor_Router_InsertUser = new grpc.web.MethodDescriptor(
  '/router.Router/InsertUser',
  grpc.web.MethodType.UNARY,
  models_user_pb.UserInfo,
  proto.router.UserResponse,
  /**
   * @param {!proto.user.UserInfo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.UserResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserInfo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.insertUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/InsertUser',
      request,
      metadata || {},
      methodDescriptor_Router_InsertUser,
      callback);
};


/**
 * @param {!proto.user.UserInfo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.UserResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.insertUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/InsertUser',
      request,
      metadata || {},
      methodDescriptor_Router_InsertUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.User,
 *   !proto.router.UserResponse>}
 */
const methodDescriptor_Router_UpdateUser = new grpc.web.MethodDescriptor(
  '/router.Router/UpdateUser',
  grpc.web.MethodType.UNARY,
  models_user_pb.User,
  proto.router.UserResponse,
  /**
   * @param {!proto.user.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.UserResponse.deserializeBinary
);


/**
 * @param {!proto.user.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_Router_UpdateUser,
      callback);
};


/**
 * @param {!proto.user.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.UserResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_Router_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.studorg.StudorgID,
 *   !proto.router.StudorgResponse>}
 */
const methodDescriptor_Router_GetStudorg = new grpc.web.MethodDescriptor(
  '/router.Router/GetStudorg',
  grpc.web.MethodType.UNARY,
  models_studorg_pb.StudorgID,
  proto.router.StudorgResponse,
  /**
   * @param {!proto.studorg.StudorgID} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.StudorgResponse.deserializeBinary
);


/**
 * @param {!proto.studorg.StudorgID} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.StudorgResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.StudorgResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.getStudorg =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/GetStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_GetStudorg,
      callback);
};


/**
 * @param {!proto.studorg.StudorgID} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.StudorgResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.getStudorg =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/GetStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_GetStudorg);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.studorg.StudorgInfo,
 *   !proto.router.StudorgResponse>}
 */
const methodDescriptor_Router_InsertStudorg = new grpc.web.MethodDescriptor(
  '/router.Router/InsertStudorg',
  grpc.web.MethodType.UNARY,
  models_studorg_pb.StudorgInfo,
  proto.router.StudorgResponse,
  /**
   * @param {!proto.studorg.StudorgInfo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.StudorgResponse.deserializeBinary
);


/**
 * @param {!proto.studorg.StudorgInfo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.StudorgResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.StudorgResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.insertStudorg =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/InsertStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_InsertStudorg,
      callback);
};


/**
 * @param {!proto.studorg.StudorgInfo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.StudorgResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.insertStudorg =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/InsertStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_InsertStudorg);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.studorg.Studorg,
 *   !proto.router.StudorgResponse>}
 */
const methodDescriptor_Router_UpdateStudorg = new grpc.web.MethodDescriptor(
  '/router.Router/UpdateStudorg',
  grpc.web.MethodType.UNARY,
  models_studorg_pb.Studorg,
  proto.router.StudorgResponse,
  /**
   * @param {!proto.studorg.Studorg} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.router.StudorgResponse.deserializeBinary
);


/**
 * @param {!proto.studorg.Studorg} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.router.StudorgResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.router.StudorgResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.router.RouterClient.prototype.updateStudorg =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/router.Router/UpdateStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_UpdateStudorg,
      callback);
};


/**
 * @param {!proto.studorg.Studorg} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.router.StudorgResponse>}
 *     Promise that resolves to the response
 */
proto.router.RouterPromiseClient.prototype.updateStudorg =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/router.Router/UpdateStudorg',
      request,
      metadata || {},
      methodDescriptor_Router_UpdateStudorg);
};


module.exports = proto.router;

