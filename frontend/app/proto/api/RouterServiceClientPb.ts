/**
 * @fileoverview gRPC-Web generated client stub for router
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: api/router.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_router_pb from '../api/router_pb';
import * as models_studorg_pb from '../models/studorg_pb';
import * as models_user_pb from '../models/user_pb';


export class RouterClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/router.Router/GetUser',
    grpcWeb.MethodType.UNARY,
    models_user_pb.UserID,
    api_router_pb.UserResponse,
    (request: models_user_pb.UserID) => {
      return request.serializeBinary();
    },
    api_router_pb.UserResponse.deserializeBinary
  );

  getUser(
    request: models_user_pb.UserID,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.UserResponse>;

  getUser(
    request: models_user_pb.UserID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.UserResponse>;

  getUser(
    request: models_user_pb.UserID,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorInsertUser = new grpcWeb.MethodDescriptor(
    '/router.Router/InsertUser',
    grpcWeb.MethodType.UNARY,
    models_user_pb.UserInfo,
    api_router_pb.UserResponse,
    (request: models_user_pb.UserInfo) => {
      return request.serializeBinary();
    },
    api_router_pb.UserResponse.deserializeBinary
  );

  insertUser(
    request: models_user_pb.UserInfo,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.UserResponse>;

  insertUser(
    request: models_user_pb.UserInfo,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.UserResponse>;

  insertUser(
    request: models_user_pb.UserInfo,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/InsertUser',
        request,
        metadata || {},
        this.methodDescriptorInsertUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/InsertUser',
    request,
    metadata || {},
    this.methodDescriptorInsertUser);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/router.Router/UpdateUser',
    grpcWeb.MethodType.UNARY,
    models_user_pb.User,
    api_router_pb.UserResponse,
    (request: models_user_pb.User) => {
      return request.serializeBinary();
    },
    api_router_pb.UserResponse.deserializeBinary
  );

  updateUser(
    request: models_user_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.UserResponse>;

  updateUser(
    request: models_user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.UserResponse>;

  updateUser(
    request: models_user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

  methodDescriptorGetStudorg = new grpcWeb.MethodDescriptor(
    '/router.Router/GetStudorg',
    grpcWeb.MethodType.UNARY,
    models_studorg_pb.StudorgID,
    api_router_pb.StudorgResponse,
    (request: models_studorg_pb.StudorgID) => {
      return request.serializeBinary();
    },
    api_router_pb.StudorgResponse.deserializeBinary
  );

  getStudorg(
    request: models_studorg_pb.StudorgID,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.StudorgResponse>;

  getStudorg(
    request: models_studorg_pb.StudorgID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.StudorgResponse>;

  getStudorg(
    request: models_studorg_pb.StudorgID,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/GetStudorg',
        request,
        metadata || {},
        this.methodDescriptorGetStudorg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/GetStudorg',
    request,
    metadata || {},
    this.methodDescriptorGetStudorg);
  }

  methodDescriptorInsertStudorg = new grpcWeb.MethodDescriptor(
    '/router.Router/InsertStudorg',
    grpcWeb.MethodType.UNARY,
    models_studorg_pb.StudorgInfo,
    api_router_pb.StudorgResponse,
    (request: models_studorg_pb.StudorgInfo) => {
      return request.serializeBinary();
    },
    api_router_pb.StudorgResponse.deserializeBinary
  );

  insertStudorg(
    request: models_studorg_pb.StudorgInfo,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.StudorgResponse>;

  insertStudorg(
    request: models_studorg_pb.StudorgInfo,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.StudorgResponse>;

  insertStudorg(
    request: models_studorg_pb.StudorgInfo,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/InsertStudorg',
        request,
        metadata || {},
        this.methodDescriptorInsertStudorg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/InsertStudorg',
    request,
    metadata || {},
    this.methodDescriptorInsertStudorg);
  }

  methodDescriptorUpdateStudorg = new grpcWeb.MethodDescriptor(
    '/router.Router/UpdateStudorg',
    grpcWeb.MethodType.UNARY,
    models_studorg_pb.Studorg,
    api_router_pb.StudorgResponse,
    (request: models_studorg_pb.Studorg) => {
      return request.serializeBinary();
    },
    api_router_pb.StudorgResponse.deserializeBinary
  );

  updateStudorg(
    request: models_studorg_pb.Studorg,
    metadata: grpcWeb.Metadata | null): Promise<api_router_pb.StudorgResponse>;

  updateStudorg(
    request: models_studorg_pb.Studorg,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void): grpcWeb.ClientReadableStream<api_router_pb.StudorgResponse>;

  updateStudorg(
    request: models_studorg_pb.Studorg,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_router_pb.StudorgResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/router.Router/UpdateStudorg',
        request,
        metadata || {},
        this.methodDescriptorUpdateStudorg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/router.Router/UpdateStudorg',
    request,
    metadata || {},
    this.methodDescriptorUpdateStudorg);
  }

}

