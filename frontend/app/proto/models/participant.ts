// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "models/participant.proto" (package "participant", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { StudorgRole } from "./studorg";
import { UserInfo } from "./user";
import { StudorgID } from "./studorg";
import { UserID } from "./user";
/**
 * @generated from protobuf message participant.Participant
 */
export interface Participant {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: user.UserID userID = 2;
     */
    userID?: UserID;
    /**
     * @generated from protobuf field: studorg.StudorgID studorgID = 3;
     */
    studorgID?: StudorgID;
    /**
     * @generated from protobuf field: user.UserInfo userInfo = 4;
     */
    userInfo?: UserInfo;
    /**
     * @generated from protobuf field: studorg.StudorgRole role = 5;
     */
    role: StudorgRole;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp admissionTime = 6;
     */
    admissionTime?: Timestamp;
    /**
     * @generated from protobuf field: string contactInfo = 7;
     */
    contactInfo: string;
    /**
     * @generated from protobuf field: string customRole = 8;
     */
    customRole: string;
    /**
     * @generated from protobuf field: string info = 9;
     */
    info: string;
    /**
     * @generated from protobuf field: bool isContact = 10;
     */
    isContact: boolean;
}
/**
 * @generated from protobuf message participant.Participants
 */
export interface Participants {
    /**
     * @generated from protobuf field: repeated participant.Participant participants = 1;
     */
    participants: Participant[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Participant$Type extends MessageType<Participant> {
    constructor() {
        super("participant.Participant", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userID", kind: "message", T: () => UserID },
            { no: 3, name: "studorgID", kind: "message", T: () => StudorgID },
            { no: 4, name: "userInfo", kind: "message", T: () => UserInfo },
            { no: 5, name: "role", kind: "enum", T: () => ["studorg.StudorgRole", StudorgRole] },
            { no: 6, name: "admissionTime", kind: "message", T: () => Timestamp },
            { no: 7, name: "contactInfo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "customRole", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "isContact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Participant>): Participant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.role = 0;
        message.contactInfo = "";
        message.customRole = "";
        message.info = "";
        message.isContact = false;
        if (value !== undefined)
            reflectionMergePartial<Participant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Participant): Participant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* user.UserID userID */ 2:
                    message.userID = UserID.internalBinaryRead(reader, reader.uint32(), options, message.userID);
                    break;
                case /* studorg.StudorgID studorgID */ 3:
                    message.studorgID = StudorgID.internalBinaryRead(reader, reader.uint32(), options, message.studorgID);
                    break;
                case /* user.UserInfo userInfo */ 4:
                    message.userInfo = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                case /* studorg.StudorgRole role */ 5:
                    message.role = reader.int32();
                    break;
                case /* google.protobuf.Timestamp admissionTime */ 6:
                    message.admissionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.admissionTime);
                    break;
                case /* string contactInfo */ 7:
                    message.contactInfo = reader.string();
                    break;
                case /* string customRole */ 8:
                    message.customRole = reader.string();
                    break;
                case /* string info */ 9:
                    message.info = reader.string();
                    break;
                case /* bool isContact */ 10:
                    message.isContact = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Participant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* user.UserID userID = 2; */
        if (message.userID)
            UserID.internalBinaryWrite(message.userID, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* studorg.StudorgID studorgID = 3; */
        if (message.studorgID)
            StudorgID.internalBinaryWrite(message.studorgID, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* user.UserInfo userInfo = 4; */
        if (message.userInfo)
            UserInfo.internalBinaryWrite(message.userInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* studorg.StudorgRole role = 5; */
        if (message.role !== 0)
            writer.tag(5, WireType.Varint).int32(message.role);
        /* google.protobuf.Timestamp admissionTime = 6; */
        if (message.admissionTime)
            Timestamp.internalBinaryWrite(message.admissionTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string contactInfo = 7; */
        if (message.contactInfo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.contactInfo);
        /* string customRole = 8; */
        if (message.customRole !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.customRole);
        /* string info = 9; */
        if (message.info !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.info);
        /* bool isContact = 10; */
        if (message.isContact !== false)
            writer.tag(10, WireType.Varint).bool(message.isContact);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message participant.Participant
 */
export const Participant = new Participant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Participants$Type extends MessageType<Participants> {
    constructor() {
        super("participant.Participants", [
            { no: 1, name: "participants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<Participants>): Participants {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial<Participants>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Participants): Participants {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated participant.Participant participants */ 1:
                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Participants, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated participant.Participant participants = 1; */
        for (let i = 0; i < message.participants.length; i++)
            Participant.internalBinaryWrite(message.participants[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message participant.Participants
 */
export const Participants = new Participants$Type();
