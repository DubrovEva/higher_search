// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "models/studorg.proto" (package "studorg", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Contact } from "./common";
import { UserID } from "./user";
/**
 * @generated from protobuf message studorg.StudorgID
 */
export interface StudorgID {
    /**
     * @generated from protobuf field: int64 ID = 1 [json_name = "ID"];
     */
    iD: string;
}
/**
 * @generated from protobuf message studorg.StudorgInfo
 */
export interface StudorgInfo {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: user.UserID head = 3;
     */
    head?: UserID;
    /**
     * @generated from protobuf field: repeated common.Contact contacts = 4;
     */
    contacts: Contact[];
    /**
     * @generated from protobuf field: studorg.StudorgStatus status = 5;
     */
    status: StudorgStatus;
    /**
     * @generated from protobuf field: string faculty = 6;
     */
    faculty: string;
    /**
     * @generated from protobuf field: string campus = 7;
     */
    campus: string;
    /**
     * @generated from protobuf field: repeated common.Contact links = 8;
     */
    links: Contact[];
    /**
     * @generated from protobuf field: string language = 9;
     */
    language: string;
}
/**
 * @generated from protobuf message studorg.Studorg
 */
export interface Studorg {
    /**
     * @generated from protobuf field: studorg.StudorgID ID = 1 [json_name = "ID"];
     */
    iD?: StudorgID;
    /**
     * @generated from protobuf field: studorg.StudorgInfo studorg_info = 2;
     */
    studorgInfo?: StudorgInfo;
}
/**
 * @generated from protobuf enum studorg.StudorgStatus
 */
export enum StudorgStatus {
    /**
     * @generated from protobuf enum value: NOT_OFFICIAL = 0;
     */
    NOT_OFFICIAL = 0,
    /**
     * @generated from protobuf enum value: OFFICIAL = 1;
     */
    OFFICIAL = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class StudorgID$Type extends MessageType<StudorgID> {
    constructor() {
        super("studorg.StudorgID", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<StudorgID>): StudorgID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = "0";
        if (value !== undefined)
            reflectionMergePartial<StudorgID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgID): StudorgID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ID = 1 [json_name = "ID"]; */
        if (message.iD !== "0")
            writer.tag(1, WireType.Varint).int64(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message studorg.StudorgID
 */
export const StudorgID = new StudorgID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudorgInfo$Type extends MessageType<StudorgInfo> {
    constructor() {
        super("studorg.StudorgInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "head", kind: "message", T: () => UserID },
            { no: 4, name: "contacts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Contact },
            { no: 5, name: "status", kind: "enum", T: () => ["studorg.StudorgStatus", StudorgStatus] },
            { no: 6, name: "faculty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "campus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "links", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Contact },
            { no: 9, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StudorgInfo>): StudorgInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.contacts = [];
        message.status = 0;
        message.faculty = "";
        message.campus = "";
        message.links = [];
        message.language = "";
        if (value !== undefined)
            reflectionMergePartial<StudorgInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudorgInfo): StudorgInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* user.UserID head */ 3:
                    message.head = UserID.internalBinaryRead(reader, reader.uint32(), options, message.head);
                    break;
                case /* repeated common.Contact contacts */ 4:
                    message.contacts.push(Contact.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* studorg.StudorgStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* string faculty */ 6:
                    message.faculty = reader.string();
                    break;
                case /* string campus */ 7:
                    message.campus = reader.string();
                    break;
                case /* repeated common.Contact links */ 8:
                    message.links.push(Contact.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string language */ 9:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudorgInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* user.UserID head = 3; */
        if (message.head)
            UserID.internalBinaryWrite(message.head, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated common.Contact contacts = 4; */
        for (let i = 0; i < message.contacts.length; i++)
            Contact.internalBinaryWrite(message.contacts[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* studorg.StudorgStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* string faculty = 6; */
        if (message.faculty !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.faculty);
        /* string campus = 7; */
        if (message.campus !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.campus);
        /* repeated common.Contact links = 8; */
        for (let i = 0; i < message.links.length; i++)
            Contact.internalBinaryWrite(message.links[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string language = 9; */
        if (message.language !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message studorg.StudorgInfo
 */
export const StudorgInfo = new StudorgInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Studorg$Type extends MessageType<Studorg> {
    constructor() {
        super("studorg.Studorg", [
            { no: 1, name: "ID", kind: "message", jsonName: "ID", T: () => StudorgID },
            { no: 2, name: "studorg_info", kind: "message", T: () => StudorgInfo }
        ]);
    }
    create(value?: PartialMessage<Studorg>): Studorg {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Studorg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Studorg): Studorg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* studorg.StudorgID ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = StudorgID.internalBinaryRead(reader, reader.uint32(), options, message.iD);
                    break;
                case /* studorg.StudorgInfo studorg_info */ 2:
                    message.studorgInfo = StudorgInfo.internalBinaryRead(reader, reader.uint32(), options, message.studorgInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Studorg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* studorg.StudorgID ID = 1 [json_name = "ID"]; */
        if (message.iD)
            StudorgID.internalBinaryWrite(message.iD, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* studorg.StudorgInfo studorg_info = 2; */
        if (message.studorgInfo)
            StudorgInfo.internalBinaryWrite(message.studorgInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message studorg.Studorg
 */
export const Studorg = new Studorg$Type();
