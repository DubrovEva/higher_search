syntax = "proto3";
package router;
option go_package = "github.com/DubrovEva/backend/higher_search/pkg/proto/api";

import "models/common.proto";
import "models/studorg.proto";
import "models/user.proto";
import "models/errors.proto";
import "models/participant.proto";

service Router {
  // user methods
  rpc GetPersonalInfo(WithoutParameters) returns (UserResponse);
  rpc GetUser (user.UserID) returns (UserResponse);
  rpc InsertUser (user.UserInfo) returns (UserResponse);
  rpc UpdateUser (user.User) returns (SuccessResponse);

  // authorization methods
  rpc AuthorizeUser (AuthorizationRequest) returns (UserIDResponse);
  rpc IsAuth (WithoutParameters) returns (user.AuthInfo);
  rpc Logout (WithoutParameters) returns (SuccessResponse);
  rpc RegisterUser (RegistrationRequest) returns (UserIDResponse);

  // studorgs methods
  rpc GetStudorg (studorg.StudorgID) returns (StudorgResponse);
  rpc CreateStudorg (studorg.StudorgInfo) returns (StudorgIDResponse);
  rpc UpdateStudorg (studorg.Studorg) returns (SuccessResponse);
  rpc GetAllStudorgs (WithoutParameters) returns (StudorgsResponse);
  rpc SearchStudorgs (SearchRequest) returns (StudorgsResponse);

  // user2studorg methods
  rpc GetPersonalStudorgRole (studorg.StudorgID) returns (RoleResponse);
  rpc GetPersonalStudorgs (WithoutParameters) returns (StudorgsResponse);
  rpc GetPersonalStudorgsNumber (user.UserID) returns (NumberResponse);

  rpc GetParticipants (studorg.StudorgID) returns (ParticipantsResponse);
  rpc GetOrganizers (studorg.StudorgID) returns (ParticipantsResponse);
  rpc GetParticipantsNumber (studorg.StudorgID) returns (NumberResponse);

  rpc AddToStudorg (studorg.StudorgID) returns (SuccessResponse);
  rpc DeleteFromStudorg (studorg.StudorgID) returns (SuccessResponse);

  rpc UpdateParticipant (participant.Participant) returns (SuccessResponse);

  // moderation methods

  rpc ModerateStudorg (studorg.Studorg) returns (SuccessResponse);
}

// requests

message WithoutParameters {}

message AuthorizationRequest {
  string email = 1;
  string password = 2;
}

message RegistrationRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  string surname = 4;
}

message SearchRequest {
  common.Faculty faculty = 1;
  common.Campus campus = 2;
  common.Language language = 3;
  repeated string tags = 4;
}

// responses

message UserResponse {
  oneof response {
    Error err = 1;
    user.User user = 2;
  }
}

message UserIDResponse {
  oneof response {
    Error err = 1;
    user.UserID userID = 2;
  }
}

message ParticipantResponse {
  oneof response {
    Error err = 1;
    participant.Participant participant = 2;
  }
}

message ParticipantsResponse {
  oneof response {
    Error err = 1;
    participant.Participants participants = 2;
  }
}

message StudorgResponse {
  oneof response {
    Error err = 1;
    studorg.Studorg studorg = 2;
  }
}

message StudorgIDResponse {
  oneof response {
    Error err = 1;
    studorg.StudorgID studorgID = 2;
  }
}

message StudorgsResponse {
  oneof response {
    Error err = 1;
    studorg.Studorgs studorgs = 2;
  }
}

message Error {
  string msg = 1;
  errors.ErrorCode code = 2;
}

message NumberResponse {
  oneof response {
    Error err = 1;
    int64 number = 2;
  }
}

message SuccessResponse {
  oneof response {
    Error err = 1;
    bool success = 2;
  }
}

message RoleResponse {
  studorg.StudorgRole role = 1;
}